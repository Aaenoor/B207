openapi: '3.0.3'
info:
  title: JWT Authentication
  version: '1.0'
servers:
  - url: https://localhost:3000
    description: JWT demonstration server 1
  - url: https://localhost:4000
    description: JWT demonstration server 2

components:
  schemas:
    JWT:
      type: object
      properties:
        id:
          type: string
          description: Unique identifer for the User
        name:
          type: string
          description: User's name
        iat:
          type: integer
          format: int64
          description: Issued at time
        exp:
          type: integer
          format: int64
          description: Expiration time
        role:
          type: array
          items:
            type: string
          description: User role
        property:
          type: integer
  securitySchemes:
    name:
      type: http
      scheme: bearer
      bearerFormat: JWTpaths

paths:
  /users:
    post:
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
               name: 
                type: string
               password: 
                type: string
               role:
                type: string
                description: user role (user, admin)
              required:
              - name
              - password
              - role
      responses:
        '201':
          description: Created
        '400':
          description: Invalid role
        '500':
          description: Internal Server Error
    get:
      summary: Get user details
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  refresh_token:
                    type: string
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /users/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
              required:
                - name
                - password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT Access token
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2Njg0N2Q1YWUxYzI2NjU5ZTgyOTI2OWUiLCJuYW1lIjoiZmluYWx1c2VyIiwicm9sZXMiOlsidXNlciJdLCJpYXQiOjE3MTk5Nzk0NjQsImV4cCI6MTcyMjU3MTQ2NH0.pxMJUyyKCxwpEVAt0qQ8bRlUt2N429b6DU532zTxzxw
                  refreshToken: 
                    type: string
                    description: JWT refresh token
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2Njg0N2Q1YWUxYzI2NjU5ZTgyOTI2OWUiLCJuYW1lIjoiZmluYWx1c2VyIiwiaWF0IjoxNzE5OTc5NDY0fQ._h-BU85ptNpgUg_mirL28OivEcg4i4nlwpbR_ueKDvw
        '400':
          description: cannot find user
        '500': 
         description: internal server error
  /token:
    post:
      summary: Refresh access token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
                - token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: internal server error
  /admin/users:
    get:
      summary: Return message for admin
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: 
                  message: Hello user!
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /user/profile:
    get:
      summary: Return message for user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: 
                  message: Hello user!
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  

